age_dist_by_campaign <- facebook_ads_merged |>
group_by(campaign_id, age) |>
summarise(count = n(), .groups = "drop") |>
group_by(campaign_id) |>
mutate(pct = round(100 * count / sum(count), 1))
# Gender distributiom by campaign
# total observations by campaign, cluster by gender, age
## Visualizations
# Age distribution by campaign
ggplot(age_dist_by_campaign, aes(x = factor(campaign_id), y = count, fill = age)) +
geom_col(position = "dodge") +
labs(
title = "Age Distribution per Campaign",
x = "Campaign ID",
y = "Count",
fill = "Age Group"
) +
theme_minimal()
# Gender distributiom by campaign
# total observations by campaign, cluster by gender, age
age_dist_static <- ggplot(age_dist_by_campaign, aes(x = factor(campaign_id), y = count, fill = age)) +
geom_col(position = "dodge") +
labs(
title = "Age Distribution per Campaign",
x = "Campaign ID",
y = "Count",
fill = "Age Group"
) +
theme_minimal()
library(plotly)
age_dist_interact <- ggplotly(age_dist_static)
age_dist_interact
gender_dist_by_campaign <- facebook_ads_merged |>
group_by(campaign_id, gender) |>
summarise(count = n(), .groups = "drop") |>
arrange(campaign_id, gender)
gender_dist_by_campaign
age_dist_by_campaign
gender_dist_by_campaign
gender_dist_by_campaign <- facebook_ads_merged |>
group_by(campaign_id, gender) |>
summarise(count = n(), .groups = "drop") |>
arrange(campaign_id, gender) |>
mutate(pct = round(100 * count / sum(count), 1))
gender_dist_by_campaign
age_dist_by_campaign
gender_dist_by_campaign <- facebook_ads_pg_df |>
group_by(campaign_id, gender) |>
summarise(count = n(), .groups = "drop") |>
group_by(campaign_id) |>
mutate(pct = round(100 * count / sum(count), 1)) |>
ungroup()
gender_dist_by_campaign
gender_dist_by_campaign <- facebook_ads_merged |>
group_by(campaign_id, gender) |>
summarise(count = n(), .groups = "drop") |>
group_by(campaign_id) |>
mutate(pct = round(100 * count / sum(count), 1)) |>
ungroup()
gender_dist_by_campaign
gender_dist_static <- ggplot(gender_dist_by_campaign, aes(x = factor(campaign_id), y = count, fill = gender)) +
geom_col(position = "dodge") +
labs(
title = "Gender Distribution per Campaign",
x = "Campaign ID",
y = "Count",
fill = "Gender"
) +
theme_minimal()
gender_dist_static
gender_dist_interact <- ggplotly(gender_dist_static)
gender_dist_interact
campaign_totals <- facebook_ads_merged |>
group_by(campaign_id) |>
summarise(total_obs = n(), .groups = "drop") |>
arrange(desc(total_obs))
campaign_totals
campaign_totals_static <-ggplot(campaign_totals, aes(x = factor(campaign_id), y = total_obs)) +
geom_col(fill = "steelblue") +
labs(
title = "Total Observations per Campaign",
x = "Campaign ID",
y = "Total Observations"
) +
theme_minimal()
campaign_totals_static
campaign_totals_interact <- ggplotly(campaign_totals_static)
campaign_totals_interact
conversion_summary <- facebook_ads_merged |>
group_by(campaign_id) |>
summarise(
total_conversion = sum(total_conversion, na.rm = TRUE),
approved_conversion = sum(approved_conversion, na.rm = TRUE),
.groups = "drop"
) %>%
pivot_longer(
cols = c(total_conversion, approved_conversion),
names_to = "conversion_type",
values_to = "count"
)
conversion_summary <- facebook_ads_merged |>
group_by(campaign_id) |>
summarise(
total_conversion = sum(total_conversion, na.rm = TRUE),
approved_conversion = sum(approved_conversion, na.rm = TRUE),
.groups = "drop"
) |>
pivot_longer(
cols = c(total_conversion, approved_conversion),
names_to = "conversion_type",
values_to = "count"
)
library(tidyr)
conversion_summary <- facebook_ads_pg_df |>
group_by(campaign_id) |>
summarise(
total_conversion = sum(total_conversion, na.rm = TRUE),
approved_conversion = sum(approved_conversion, na.rm = TRUE),
.groups = "drop"
) |>
pivot_longer(
cols = c(total_conversion, approved_conversion),
names_to = "conversion_type",
values_to = "count"
)
conversion_summary <- facebook_ads_pg_df |>
group_by(campaign_id) |>
summarise(
total_conversion = sum(total_conversion, na.rm = TRUE),
approved_conversion = sum(approved_conversion, na.rm = TRUE),
.groups = "drop"
) |>
pivot_longer(
cols = c(total_conversions, approved_conversions),
names_to = "conversion_type",
values_to = "count"
)
conversion_summary <- facebook_ads_merged |>
group_by(campaign_id) |>
summarise(
total_conversion = sum(total_conversion, na.rm = TRUE),
approved_conversion = sum(approved_conversion, na.rm = TRUE),
.groups = "drop"
) |>
pivot_longer(
cols = c(total_conversions, approved_conversions),
names_to = "conversion_type",
values_to = "count"
)
conversion_summary <- facebook_ads_merged |>
group_by(campaign_id) |>
summarise(
total_conversions = sum(total_conversion, na.rm = TRUE),
approved_conversions = sum(approved_conversion, na.rm = TRUE),
.groups = "drop"
) |>
pivot_longer(
cols = c(total_conversions, approved_conversions),
names_to = "conversion_type",
values_to = "count"
)
conversion_summary <- facebook_ads_merged |>
group_by(campaign_id) |>
summarise(
total_conversions = sum(total_conversion, na.rm = TRUE),
approved_conversions = sum(approved_conversion, na.rm = TRUE),
.groups = "drop"
) |>
pivot_longer(
cols = c(total_conversion, approved_conversion),
names_to = "conversion_type",
values_to = "count"
)
conversion_summary <- facebook_ads_merged |>
group_by(campaign_id) |>
summarise(
conversions = sum(total_conversions, na.rm = TRUE),
a_conversions = sum(approved_conversions, na.rm = TRUE),
.groups = "drop"
) |>
pivot_longer(
cols = c(total_conversions, approved_conversions),
names_to = "conversion_type",
values_to = "count"
)
conversion_summary <- facebook_ads_pg_df %>%
group_by(campaign_id) %>%
summarise(
total_conversions = sum(total_conversions, na.rm = TRUE),
approved_conversions = sum(approved_conversions, na.rm = TRUE),
.groups = "drop"
) %>%
pivot_longer(
cols = c(total_conversions, approved_conversions),
names_to = "conversion_type",
values_to = "count"
)
conversion_summary <- facebook_ads_pg_df %>%
group_by(campaign_id) %>%
summarise(
total_conversions = sum(total_conversions, na.rm = TRUE),
approved_conversion = sum(approved_conversion, na.rm = TRUE),
.groups = "drop"
) %>%
pivot_longer(
cols = c(total_conversions, approved_conversion),
names_to = "conversion_type",
values_to = "count"
)
conversion_summary
conversion_summary <- facebook_ads_merged %>%
group_by(campaign_id) %>%
summarise(
total_conversions = sum(total_conversions, na.rm = TRUE),
approved_conversion = sum(approved_conversion, na.rm = TRUE),
.groups = "drop"
) %>%
pivot_longer(
cols = c(total_conversions, approved_conversion),
names_to = "conversion_type",
values_to = "count"
)
conversion_summary
approval_rates <- facebook_ads_merged |>
group_by(campaign_id) |>
summarise(
total = sum(total_conversions, na.rm = TRUE),
approved = sum(approved_conversions, na.rm = TRUE),
approval_rate = round(100 * approved / total, 1),
.groups = "drop"
)
approval_rates <- facebook_ads_merged |>
group_by(campaign_id) |>
summarise(
total = sum(total_conversions, na.rm = TRUE),
approved = sum(approved_conversion, na.rm = TRUE),
approval_rate = round(100 * approved / total, 1),
.groups = "drop"
)
approval_rates
ggplot(approval_rates, aes(x = factor(campaign_id), y = approval_rate)) +
geom_col(fill = "darkgreen") +
labs(
title = "Approval Rate per Campaign",
x = "Campaign ID",
y = "Approval Rate (%)"
) +
theme_minimal()
approval_rate_interact <- ggplotly(approval_rate_static)
approval_rate_static
approval_rate_static <- ggplot(approval_rates, aes(x = factor(campaign_id), y = approval_rate)) +
geom_col(fill = "darkgreen") +
labs(
title = "Approval Rate per Campaign",
x = "Campaign ID",
y = "Approval Rate (%)"
) +
theme_minimal()
approval_rate_static
approval_rate_interact <- ggplotly(approval_rate_static)
approval_rate_interact
campaign_metrics <- facebook_ads_merged |>
group_by(campaign_id) |>
summarise(
impressions = sum(impressions, na.rm = TRUE),
clicks = sum(clicks, na.rm = TRUE),
spent = sum(spent, na.rm = TRUE),
total_conversions = sum(total_conversions, na.rm = TRUE),
approved_conversions = sum(approved_conversion, na.rm = TRUE),
.groups = "drop"
) |>
mutate(
ctr = ifelse(impressions > 0, round(100 * clicks / impressions, 2), NA),
total_cr = ifelse(clicks > 0, round(100 * total_conversions / clicks, 2), NA),
approved_cr = ifelse(clicks > 0, round(100 * approved_conversions / clicks, 2), NA),
cpc = ifelse(clicks > 0, round(spent / clicks, 2), NA),
cpcv = ifelse(total_conversions > 0, round(spent / total_conversions, 2), NA)
)
ctr_static
ctr_static <- ggplot(campaign_metrics, aes(x = factor(campaign_id), y = ctr)) +
geom_col(fill = "#0072B2") +
labs(
title = "Click-Through Rate (CTR) per Campaign",
x = "Campaign ID",
y = "CTR (%)"
) +
theme_minimal()
ctr_static
ggplotly(ctr_static)
campaign_metrics <- facebook_ads_merged |>
group_by(campaign_id) |>
summarise(
impressions = sum(impressions, na.rm = TRUE),
clicks = sum(clicks, na.rm = TRUE),
spent = sum(spent, na.rm = TRUE),
total_conversions = sum(total_conversions, na.rm = TRUE),
approved_conversions = sum(approved_conversion, na.rm = TRUE),
.groups = "drop"
) |>
mutate(
ctr = round(100 * clicks / impressions, 2),                         # Click-Through Rate
total_cr = round(100 * total_conversions / clicks, 2),              # Total Conversion Rate
approved_cr = round(100 * approved_conversions / clicks, 2),        # Approved Conversion Rate
cpc = round(spent / clicks, 2),                                     # Cost Per Click
cpcv = round(spent / total_conversions, 2)                          # Cost Per Conversion
)
ctr_static
ctr
campaign_metrics <- facebook_ads_merged |>
group_by(campaign_id) |>
summarise(
impressions = sum(impressions, na.rm = TRUE),
clicks = sum(clicks, na.rm = TRUE),
spent = sum(spent, na.rm = TRUE),
total_conversions = sum(total_conversions, na.rm = TRUE),
approved_conversions = sum(approved_conversion, na.rm = TRUE),
.groups = "drop"
) |>
mutate(
ctr = round(100 * clicks / impressions, 2),                         # Click-Through Rate
total_cr = round(100 * total_conversions / clicks, 2),              # Total Conversion Rate
approved_cr = round(100 * approved_conversions / clicks, 2),        # Approved Conversion Rate
cpc = round(spent / clicks, 2),                                     # Cost Per Click
cpcv = round(spent / total_conversions, 2)                          # Cost Per Conversion
)
campaign_metrics
campaign_metrics <- facebook_ads_merged |>
group_by(campaign_id) |>
summarise(
impressions = sum(impressions, na.rm = TRUE),
clicks = sum(clicks, na.rm = TRUE),
spent = sum(spent, na.rm = TRUE),
total_conversions = sum(total_conversions, na.rm = TRUE),
approved_conversions = sum(approved_conversion, na.rm = TRUE),
.groups = "drop"
) |>
mutate(
ctr = ifelse(impressions > 0, round(100 * clicks / impressions, 2), NA),
total_cr = ifelse(clicks > 0, round(100 * total_conversions / clicks, 2), NA),
approved_cr = ifelse(clicks > 0, round(100 * approved_conversions / clicks, 2), NA),
cpc = ifelse(clicks > 0, round(spent / clicks, 2), NA),
cpcv = ifelse(total_conversions > 0, round(spent / total_conversions, 2), NA)
)
campaign_metrics
cr_static <- ggplot(campaign_metrics, aes(x = factor(campaign_id), y = total_cr)) +
geom_col(fill = "#56B4E9") +
labs(
title = "Total Conversion Rate per Campaign",
x = "Campaign ID",
y = "Conversion Rate (%)"
) +
theme_minimal()
cr_static
cr_interact <- ggplotly(cr_static)
cr_interact
acr_static <- ggplot(campaign_metrics, aes(x = factor(campaign_id), y = approved_cr)) +
geom_col(fill = "#009E73") +
labs(
title = "Approved Conversion Rate per Campaign",
x = "Campaign ID",
y = "Approved CR (%)"
) +
theme_minimal()
acr_static
approval_rate_interact
acr_interact <- ggplotly(acr_static)
acr_interact
cpc_static <- ggplot(campaign_metrics, aes(x = factor(campaign_id), y = cpc)) +
geom_col(fill = "#E69F00") +
labs(
title = "Cost Per Click (CPC) per Campaign",
x = "Campaign ID",
y = "Cost ($)"
) +
theme_minimal()
cpc_interact <- ggplotly(cpc_static)
cpc_interact
cpc_static <- ggplot(campaign_metrics, aes(x = factor(campaign_id), y = cpc)) +
geom_col() +
labs(
title = "Cost Per Click (CPC) per Campaign",
x = "Campaign ID",
y = "Cost ($)"
) +
theme_minimal()
cpc_interact <- ggplotly(cpc_static)
cpc_interact
cpc_static <- ggplot(campaign_metrics, aes(x = factor(campaign_id), y = cpc)) +
geom_col(fill = campaign_id) +
labs(
title = "Cost Per Click (CPC) per Campaign",
x = "Campaign ID",
y = "Cost ($)"
) +
theme_minimal()
approval_rate_static <- ggplot(approval_rates, aes(x = factor(campaign_id), y = approval_rate, fill = campaign_id)) +
geom_col() +
labs(
title = "Approval Rate per Campaign",
x = "Campaign ID",
y = "Approval Rate (%)"
) +
theme_minimal()
approval_rate_interact <- ggplotly(approval_rate_static)
approval_rate_interact
cpconv_static <- ggplot(campaign_metrics, aes(x = factor(campaign_id), y = cpcv)) +
geom_col(fill = "#D55E00") +
labs(
title = "Cost Per Conversion per Campaign",
x = "Campaign ID",
y = "Cost ($)"
) +
theme_minimal()
cpconv_interact <- ggplotly(cpconv_static)
cpconv_interact
approval_rate_interact
approval_rate_static <- ggplot(approval_rates, aes(x = factor(campaign_id), y = approval_rate)) +
geom_col(aes(fill = factor(campaign_id))) +
labs(
title = "Approval Rate per Campaign",
x = "Campaign ID",
y = "Approval Rate (%)"
) +
theme_minimal()
approval_rate_interact <- ggplotly(approval_rate_static)
approval_rate_interact
ctr_static <- ggplot(campaign_metrics, aes(x = factor(campaign_id), y = ctr)) +
geom_col(aes(fill = factor(campaign_id))) +
labs(
title = "Click-Through Rate (CTR) per Campaign",
x = "Campaign ID",
y = "CTR (%)"
) +
theme_minimal()
ctr_interact <- ggplotly(ctr_atatic)
ctr_static <- ggplot(campaign_metrics, aes(x = factor(campaign_id), y = ctr)) +
geom_col(aes(fill = factor(campaign_id))) +
labs(
title = "Click-Through Rate (CTR) per Campaign",
x = "Campaign ID",
y = "CTR (%)"
) +
theme_minimal()
ctr_interact <- ggplotly(ctr_static)
ctr_interact
cr_static <- ggplot(campaign_metrics, aes(x = factor(campaign_id), y = total_cr)) +
geom_col(aes(fill = factor(campaign_id))) +
labs(
title = "Total Conversion Rate per Campaign",
x = "Campaign ID",
y = "Conversion Rate (%)"
) +
theme_minimal()
cr_interact <- ggplotly(cr_static)
cr_interact
acr_static <- ggplot(campaign_metrics, aes(x = factor(campaign_id), y = approved_cr)) +
geom_col(aes(fill = factor(campaign_id))) +
labs(
title = "Approved Conversion Rate per Campaign",
x = "Campaign ID",
y = "Approved CR (%)"
) +
theme_minimal()
acr_interact <- ggplotly(acr_static)
acr_interact
cpc_static <- ggplot(campaign_metrics, aes(x = factor(campaign_id), y = cpc)) +
geom_col(aes(fill = factor(campaign_id))) +
labs(
title = "Cost Per Click (CPC) per Campaign",
x = "Campaign ID",
y = "Cost ($)"
) +
theme_minimal()
cpc_interact <- ggplotly(cpc_static)
cpc_interact
cpconv_static <- ggplot(campaign_metrics, aes(x = factor(campaign_id), y = cpcv)) +
geom_col(aes(fill = factor(campaign_id))) +
labs(
title = "Cost Per Conversion per Campaign",
x = "Campaign ID",
y = "Cost ($)"
) +
theme_minimal()
cpconv_interact <- ggplotly(cpconv_static)
cpconv_interact
#Total Observations by Campaign
campaign_totals_static <-ggplot(campaign_totals, aes(x = factor(campaign_id), y = total_obs)) +
geom_col(aes(fill = factor(campaign_id))) +
labs(
title = "Total Observations per Campaign",
x = "Campaign ID",
y = "Total Observations"
) +
theme_minimal()
campaign_totals_interact <- ggplotly(campaign_totals_static)
campaign_totals_interact
virtualenv_create("myenv")
virtualenv_install("myenv", packages = c("scikit-learn"))
reticulate::repl_python()
reticulate::py_install("scikit-learn")
reticulate::repl_python()
py_config()
py_config()
suppressPackageStartupMessages(virtualenv_create("myenv"))
suppressPackageStartupMessages(virtualenv_install("myenv", packages = c("scikit-learn")))
suppressPackageStartupMessages(use_virtualenv("myenv", required = TRUE))
suppressPackageStartupMessages(use_virtualenv("myenv", required = TRUE))
reticulate::repl_python()
conda_create("pyads", packages = "python=3.10")
suppressPackageStartupMessages(virtualenv_create("myenv"))
suppressPackageStartupMessages(virtualenv_install("myenv", packages = c("scikit-learn")))
reticulate::repl_python()
